<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic SYSTEM "https://resources.jetbrains.com/writerside/1.0/html-entities.dtd">

<topic xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       title="Create a client application"
       id="client-create-new-application"
       help-id="getting_started_ktor_client;client-getting-started;client-get-started;client-create-a-new-application">

    <show-structure for="chapter" depth="2"/>

    <tldr>
        <var name="example_name" value="tutorial-client-get-started"/>
        <include from="lib.topic" element-id="download_example"/>
    </tldr>

    <link-summary>
        Create your first client application for sending a request and receiving a response.
    </link-summary>

    <p>
        Ktor includes a multiplatform asynchronous HTTP client, which allows you to <a href="client-requests.md">make
        requests</a> and <a href="client-responses.md">handle responses</a>,
        extend its functionality with <a href="client-plugins.md">plugins</a>, such as <a href="client-auth.md">authentication</a>,
        <a href="client-serialization.md">JSON serialization</a>, and more.
    </p>
    <p>
        In this tutorial, we'll show you how to create your first Ktor client application that sends a request and
        prints out a response.
    </p>

    <chapter title="Prerequisites" id="prerequisites">
        <include from="lib.topic" element-id="client_prerequisites"/>
    </chapter>

    <chapter title="Create a new project" id="new-project">
        <p>
            You can <a href="client-create-and-configure.md">create and configure</a> a Ktor Client manually in an
            existing project, however a convenient way to start from scratch is by generating a new project using the
            bundled Kotlin plugin for IntelliJ IDEA.
        </p>
        <p>
            To create a new Kotlin project,
            <a href="https://www.jetbrains.com/help/idea/run-for-the-first-time.html">open IntelliJ IDEA</a> and follow
            the steps below:
        </p>
        <procedure>
            <step>
                <include from="lib.topic" element-id="new_project_idea"/>
            </step>
            <step>
                <p>
                    In the
                    <control>New Project</control>
                    wizard, choose
                    <control>Kotlin</control>
                    from the list on the left.
                </p>
            </step>
            <step>
                <p>
                    On the right pane, specify the following settings:
                </p>
                <img src="client_get_started_new_project.png" alt="New Kotlin project window in intelliJ IDEA"
                     border-effect="rounded"
                     width="706"/>
                <list id="kotlin_app_settings">
                    <li>
                        <p>
                            <control>Name</control>
                            : Specify a project name.
                        </p>
                    </li>
                    <li>
                        <p>
                            <control>Location</control>
                            : Specify a directory for your project.
                        </p>
                    </li>
                    <li>
                        <p>
                            <control>Build system</control>
                            : Make sure that
                            <control>Gradle</control>
                            is selected.
                        </p>
                    </li>
                    <li>
                        <p>
                            <control>Gradle DSL</control>
                            : Choose
                            <control>Kotlin</control>
                            .
                        </p>
                    </li>
                    <li>
                        <p>
                            <control>Add sample code</control>
                            : Select this option to include sample code in the generated project.
                        </p>
                    </li>
                </list>
            </step>
            <step>
                <p>
                    Click
                    <control>Create</control>
                    and wait until IntelliJ IDEA generates a project and installs the dependencies.
                </p>
            </step>
        </procedure>
    </chapter>


    <chapter title="Add dependencies" id="add-dependencies">
        <p>
            Let's add dependencies required for a Ktor client.
        </p>
        <procedure>
            <step>
                <p>
                    Open the
                    <path>gradle.properties</path>
                    file and add the following line to specify the Ktor version:
                </p>
                <code-block lang="kotlin">
                    ktor_version=%ktor_version%
                </code-block>
                <note id="eap-note">
                    <p>
                        To use the EAP version of Ktor, you need to add a <a href="server-dependencies.topic"
                                                                             anchor="repositories">Space repository</a>.
                    </p>
                </note>
            </step>
            <step>
                <p>
                    Open the
                    <path>build.gradle.kts</path>
                    file and add the following artifacts to the dependencies block:
                </p>
                <code-block lang="kotlin" src="snippets/tutorial-client-get-started/build.gradle.kts"
                            include-lines="1,17-20,22"/>
                <list>
                    <li><code>ktor-client-core</code> is a core dependency that provides the main client functionality,
                    </li>
                    <li>
                        <code>ktor-client-cio</code> is a dependency for an <a href="client-engines.md">engine</a>
                        processing network requests.
                    </li>
                </list>
            </step>
            <step>
                <p>
                    Click the
                    <control>Load Gradle Changes</control>
                    icon in the top right corner of the
                    <path>build.gradle.kts</path>
                    file to install the newly added dependencies.
                </p>
                <img src="client_get_started_load_gradle_changes_name.png" alt="Load Gradle Changes" width="706"/>
            </step>
        </procedure>
    </chapter>

    <chapter title="Create a client" id="create-client">
        <p>
            To add the client implementation, navigate to
            <path>src/main/kotlin</path>
            and follow the steps below:
        </p>
        <procedure>
            <step>
                <p>
                    Open the
                    <path>Main.kt</path>
                    file and replace the existing code with the following implementation:
                </p>
                <code-block lang="kotlin"><![CDATA[
                    import io.ktor.client.*
                    import io.ktor.client.engine.cio.*

                    fun main() {
                        val client = HttpClient(CIO)
                    }
                ]]></code-block>
                <p>
                    In Ktor, a client is represented by the <a
                        href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client/-http-client/index.html">HttpClient</a>
                    class.
                </p>
            </step>
            <step>
                <p>
                    Use the <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/get.html"><code>HttpClient.get()</code></a> method to <a href="client-requests.md">make a GET request</a>.
                    A <a href="client-responses.md">response</a> will be received as a <code>HttpResponse</code> class
                    object.
                </p>
                <code-block lang="kotlin"><![CDATA[
                    import io.ktor.client.*
                    import io.ktor.client.engine.cio.*
                    import io.ktor.client.request.*
                    import io.ktor.client.statement.*

                    fun main() {
                        val client = HttpClient(CIO)
                        val response: HttpResponse = client.get("https://ktor.io/")
                    }
                ]]></code-block>
                <p>
                    After adding the code above, the IDE shows the following error for the <code>get()</code> function:
                    <emphasis>Suspend function 'get' should be called only from a coroutine or another suspend
                        function
                    </emphasis>
                    .
                </p>
                <img src="client_get_started_suspend_error.png" alt="Suspend function error" width="706"/>
                <p>
                    To fix this, you need to make the <code>main()</code> function suspending.
                </p>
                <tip>
                    To learn more about calling <code>suspend</code> functions, see <a
                        href="https://kotlinlang.org/docs/coroutines-basics.html">Coroutines basics</a>.
                </tip>
            </step>
            <step>
                <p>
                    In IntelliJ IDEA, click the red bulb next to the definition and choose
                    <control>Make main suspend</control>
                    .
                </p>
                <img src="client_get_started_suspend_error_fix.png" alt="Make main suspend" width="706"/>
            </step>
            <step>
                <p>
                    Use the <code>println()</code> function to print a <a href="client-responses.md"
                                                                          anchor="status">status
                    code</a> returned by the server and the <code>close()</code> function to
                    close the stream and release any resources associated with it. The
                    <path>Main.kt</path>
                    file should look in the following way:
                </p>
                <code-block
                        lang="kotlin"
                        src="snippets/tutorial-client-get-started/src/main/kotlin/Main.kt"/>
            </step>
        </procedure>
    </chapter>


    <chapter title="Run your application" id="make-request">
        <p>
            To run your application, navigate to the
            <path>Main.kt</path>
            file and follow the steps below:
        </p>
        <procedure>
            <step>
                <p>
                    In IntelliJ IDEA, click the gutter icon next to the <code>main()</code> function and choose
                    <control>Run 'MainKt'</control>
                    .
                </p>
                <img src="client_get_started_run_main.png" alt="Run app" width="706"/>
            </step>
            <step>
                Wait until Intellij IDEA runs the application.
            </step>
            <step>
                <p>
                    You will see the output displayed in the
                    <control>Run</control>
                    pane on the bottom of the IDE.
                </p>
                <img src="client_get_started_run_output_with_warning.png" alt="Server response" width="706"/>
                <p>
                    Although the server responds with the <code>200 OK</code> message,
                    you will also see an error message indicating that SLF4J failed to locate the
                    <code>StaticLoggerBinder</code> class, defaulting to a no-operation (NOP) logger
                    implementation. This effectively means that logging is disabled.
                </p>
                <p>
                    You now have a working client application. However, to fix this warning and be able to debug
                    HTTP calls with logging, <a anchor="enable-logging">an additional step</a> is required.
                </p>
            </step>
        </procedure>
    </chapter>
    <chapter title="Enable logging" id="enable-logging">
        <p>
            Because Ktor uses the SLF4J abstraction layer for logging on JVM, to enable logging, you need to
            <a href="client-logging.md" anchor="jvm">provide a logging framework</a>, such as
            <a href="https://logback.qos.ch/">Logback</a>.
        </p>
        <procedure id="enable-logging-procedure">
            <step>
                <p>
                    In the
                    <path>gradle.properties</path>
                    file, specify the version for the logging framework:
                </p>
                <code-block lang="kotlin">
                    logback_version=%logback_version%
                </code-block>
            </step>
            <step>
                <p>
                    Open the
                    <path>build.gradle.kts</path>
                    file and add the following artifact to the dependencies block:
                </p>
                <code-block lang="kotlin">
                    //...
                    val logback_version: String by project

                    dependencies {
                        //...
                        implementation("ch.qos.logback:logback-classic:$logback_version")
                    }
                </code-block>
            </step>
            <step>
                Click the
                <control>Load Gradle Changes</control>
                icon to install the newly added dependency.
            </step>
            <step>
                <include from="lib.topic" element-id="intellij_idea_restart_application"/>
            </step>
            <step>
                <p>
                    You should no longer see the error, but the same <code>200 OK</code> message will be displayed in
                    the
                    <control>Run</control>
                    pane on the bottom of the IDE.
                </p>
                <img src="client_get_started_run_output.png" alt="Server response" width="706"/>
                <p>
                    With this, you have enabled logging. To start seeing logs, you need to add logging
                    configuration.
                </p>
            </step>
            <step>
                <p>Navigate to
                    <path>src/main/resources</path>
                    and create a new
                    <path>logback.xml</path>
                    file with the following implementation:
                </p>
                <code-block lang="xml" ignore-vars="true"><![CDATA[
                    <configuration>
                        <appender name="APPENDER" class="ch.qos.logback.core.ConsoleAppender">
                            <encoder>
                                <pattern>%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
                            </encoder>
                        </appender>
                        <root level="trace">
                            <appender-ref ref="APPENDER"/>
                        </root>
                    </configuration>
                ]]></code-block>
            </step>
            <step>
                <include from="lib.topic" element-id="intellij_idea_restart_application"/>
            </step>
            <step>
                <p>
                    You should now be able to see trace logs above the printed response within the
                    <control>Run</control>
                    pane:
                </p>
                <img src="client_get_started_run_output_with_logs.png" alt="Server response" width="706"/>
            </step>
        </procedure>
        <tip>
            Ktor offers a simple and straightforward way to add logs for HTTP calls through the
            <a href="client-logging.md">Logging</a> plugin, while adding a
            configuration file allows you to fine-tune logging behaviour in complex applications.
        </tip>
    </chapter>
    <chapter title="Next steps" id="next-steps">
        <p>
            To better understand and extend this configuration, explore how to
            <a href="client-create-and-configure.md">create and configure a Ktor client</a>.
        </p>
    </chapter>
</topic>