<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic SYSTEM "https://resources.jetbrains.com/writerside/1.0/html-entities.dtd">

<topic xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       title="Configuration in code"
       id="server-configuration-code" help-id="Configuration-code;server-configuration-in-code">

    <show-structure for="chapter"/>

    <link-summary>
        Learn how to configure various server parameters in code.
    </link-summary>

    <p>
        Ktor allows you to configure various server parameters directly in code, including the host address, port, <a
            href="server-modules.md">server modules</a>, and more. The method of configuration depends on the
        way you set up a server - using <a href="server-create-and-configure.topic">embeddedServer
        or EngineMain</a>.
    </p>
    <p>
        With <code>embeddedServer</code>, you configure the server by passing the desired parameters directly to
        the function.
        The
        <a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.engine/embedded-server.html">
            embeddedServer
        </a>
        function accepts different parameters for configuring a server, including a <a href="server-engines.md">server
        engine</a>, the host and port for the server to listen on, and additional configurations.
    </p>
    <p>
        In this section, we'll take a look at several different examples of running <code>embeddedServer</code>,
        illustrating how you can configure the server to your advantage.
    </p>
    <chapter title="Basic configuration" id="embedded-basic">
        <p>
            The code snippet below shows a basic server setup with the Netty engine and the <code>8080</code> port.
        </p>
        <code-block
                lang="kotlin"
                src="snippets/embedded-server/src/main/kotlin/com/example/Application.kt"
                include-lines="3-7,13,28-35"
        />
        <p>
            Note that you can set the <code>port</code> parameter to <code>0</code> to run the server on a random port.
            The <code>embeddedServer</code> function returns an engine instance, so you can get a port value in code
            using the
            <a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.engine/-application-engine/resolved-connectors.html">
                ApplicationEngine.resolvedConnectors
            </a>
            function.
        </p>
    </chapter>

    <chapter title="Engine configuration" id="embedded-engine">
        <snippet id="embedded-engine-configuration">
            <p>
                The <code>embeddedServer</code> function allows you to pass engine-specific options using the
                <code>configure</code> parameter. This parameter includes options common for all engines and exposed by
                the
                <a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.engine/-application-engine/-configuration/index.html">
                    ApplicationEngine.Configuration
                </a>
                class.
            </p>
            <p>
                The example below shows how to configure a server using the <code>Netty</code> engine. Within the
                <code>configure</code> block, we define a <code>connector</code> to specify the host and port, and
                customize various server parameters:
            </p>
            <code-block
                    lang="kotlin"
                    src="snippets/embedded-server/src/main/kotlin/com/example/Application.kt"
                    include-lines="3-7,13,38-55"
            />
            <p>
                The <code>connectors.add()</code> method defines a connector with the specified host
                (<code>127.0.0.1</code>)
                and port (<code>8080</code>).
            </p>
            <p>In addition to these options, you can configure other engine-specific properties.</p>
            <chapter title="Netty" id="netty-code">
                <p>
                    Netty-specific options are exposed by the
                    <a href="https://api.ktor.io/ktor-server/ktor-server-netty/io.ktor.server.netty/-netty-application-engine/-configuration/index.html">
                        NettyApplicationEngine.Configuration
                    </a>
                    class.
                </p>
                <code-block lang="kotlin"><![CDATA[
                    import io.ktor.server.engine.*
                    import io.ktor.server.netty.*

                    fun main() {
                        embeddedServer(Netty, configure = {
                            requestQueueLimit = 16
                            shareWorkGroup = false
                            configureBootstrap = {
                                // ...
                            }
                            responseWriteTimeoutSeconds = 10
                        }) {
                            // ...
                        }.start(true)
                    }
                ]]></code-block>
            </chapter>
            <chapter title="Jetty" id="jetty-code">
                <p>
                    Jetty-specific options are exposed by the
                    <a href="https://api.ktor.io/ktor-server/ktor-server-jetty/io.ktor.server.jetty/-jetty-application-engine-base/-configuration/index.html">
                        JettyApplicationEngineBase.Configuration
                    </a>
                    class.
                </p>
                <p>You can configure the Jetty server inside the
                    <a href="https://api.ktor.io/ktor-server/ktor-server-jetty/io.ktor.server.jetty/-jetty-application-engine-base/-configuration/configure-server.html">
                        configureServer
                    </a>
                    block, which provides access to a
                    <a href="https://www.eclipse.org/jetty/javadoc/jetty-11/org/eclipse/jetty/server/Server.html">Server</a>
                    instance.
                </p>
                <p>
                    Use the <code>idleTimeout</code> property to specify the duration of time a connection can be idle
                    before it gets closed.
                </p>
                <code-block lang="kotlin"><![CDATA[
                    import io.ktor.server.engine.*
                    import io.ktor.server.jetty.*

                    fun main() {
                        embeddedServer(Jetty, configure = {
                            configureServer = { // this: Server -&gt;
                                // ...
                            }
                            idleTimeout = 30.seconds
                        }) {
                            // ...
                        }.start(true)
                    }
                ]]></code-block>
            </chapter>
            <chapter title="CIO" id="cio-code">
                <p>CIO-specific options are exposed by the
                    <a href="https://api.ktor.io/ktor-server/ktor-server-cio/io.ktor.server.cio/-c-i-o-application-engine/-configuration/index.html">
                        CIOApplicationEngine.Configuration
                    </a>
                    class.
                </p>
                <code-block lang="kotlin"><![CDATA[
                    import io.ktor.server.engine.*
                    import io.ktor.server.cio.*

                    fun main() {
                        embeddedServer(CIO, configure = {
                            connectionIdleTimeoutSeconds = 45
                        }) {
                            // ...
                        }.start(true)
                    }
                ]]></code-block>
            </chapter>
            <chapter title="Tomcat" id="tomcat-code">
                <p>If you use Tomcat as the engine, you can configure it using the
                    <a href="https://api.ktor.io/ktor-server/ktor-server-tomcat/io.ktor.server.tomcat/-tomcat-application-engine/-configuration/configure-tomcat.html">
                        configureTomcat
                    </a>
                    property, which provides access to a
                    <a href="https://tomcat.apache.org/tomcat-9.0-doc/api/org/apache/catalina/startup/Tomcat.html">Tomcat</a>
                    instance.
                </p>
                <code-block lang="kotlin"><![CDATA[
                    import io.ktor.server.engine.*
                    import io.ktor.server.tomcat.*

                    fun main() {
                        embeddedServer(Tomcat, configure = {
                            configureTomcat = { // this: Tomcat -&gt;
                                // ...
                            }
                        }) {
                            // ...
                        }.start(true)
                    }
                ]]></code-block>
            </chapter>
        </snippet>
    </chapter>

    <chapter title="Custom environment" id="embedded-custom">
        <p>
            The example below shows how to run a server with multiple connector endpoints
            using a custom configuration represented by the
            <a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.engine/-application-engine/-configuration/index.html">
                ApplicationEngine
            </a>
            interface.
        </p>
        <code-block
                lang="kotlin"
                src="snippets/embedded-server-multiple-connectors/src/main/kotlin/com/example/Application.kt"
                include-lines="3-28">
        </code-block>

        <p>
            For the complete example, see
            <a href="https://github.com/ktorio/ktor-documentation/tree/%ktor_version%/codeSnippets/snippets/embedded-server-multiple-connectors">
                embedded-server-multiple-connectors
            </a>.
        </p>

        <tip>
            <p>
                You can also use a custom environment to
                <a href="server-ssl.md" anchor="embedded-server">
                    serve HTTPS
                </a>.
            </p>
        </tip>
    </chapter>
</topic>