<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Create a WebSocket application in Kotlin with Ktor" id="server-create-websocket-application">
    <show-structure for="chapter" depth="2"/>
    <tldr>
        <var name="example_name" value="tutorial-server-websockets"/>
        <include from="lib.topic" element-id="download_example"/>
        <p>
            <b>Used plugins</b>: <a href="server-routing.md"/>,<a href="server-static-content.md">Static Content</a>,
            <a href="server-serialization.md">Content Negotiation</a>, <a href="server-websockets.md"/>,
            <a href="https://kotlinlang.org/api/kotlinx.serialization/">kotlinx.serialization</a>
        </p>
    </tldr>
    <card-summary>
        Learn how to harness the power of WebSockets to send and receive content.
    </card-summary>
    <link-summary>
        Learn how to harness the power of WebSockets to send and receive content.
    </link-summary>
    <web-summary>
        Learn how to build a WebSocket application in Kotlin with Ktor. This tutorial will walk you through the process
        of connecting your backend services with a client, through WebSockets.
    </web-summary>
    <p>
        This article walks you through the process of creating a WebSocket application in Kotlin with Ktor. It builds on
        the material covered in the <a href="server-create-restful-apis.topic">Create RESTful APIs</a> tutorial.
    </p>
    <p>This article will teach you how to do the following:</p>
    <list>
        <li>Create services that use JSON serialization.</li>
        <li>Send and receive content through a WebSocket connection.</li>
        <li>Broadcast content to multiple clients simultaneously.</li>
    </list>

    <chapter title="Prerequisites" id="prerequisites">
        <p>You can do this tutorial independently, however, we recommend that you complete the
            <a href="server-create-restful-apis.topic">Create RESTful APIs</a> tutorial to get familiar with <a
                    href="server-serialization.md">Content Negotiation</a> and REST.
        </p>
        <p>We recommend that you install <a href="https://www.jetbrains.com/help/idea/installation-guide.html">IntelliJ
            IDEA</a>, but you could use another IDE of your choice.
        </p>
    </chapter>
    <chapter title="Hello WebSockets" id="hello-websockets">
        <p>
            In this tutorial, you will build on the Task Manager service developed in the <a
                href="server-create-restful-apis.topic">Create RESTful APIs</a> tutorial by adding the
            ability to exchange <code>Task</code> objects with a client,
            through a WebSocket connection. To achieve this, you will need to add the <a href="server-websockets.md">WebSockets
            Plugin</a>. While you could manually add it to your existing project, for the sake of this tutorial, we'll
            start from scratch by creating a new project.
        </p>
        <chapter title="Create the initial project with plugins" id="create=project">
            <procedure>
                <step>
                    <include from="lib.topic" element-id="generate_project_step_1"/>
                </step>
                <step>
                    <p>In the
                        <control>Project artifact</control>
                        field, enter
                        <path>com.example.ktor-websockets-task-app</path>
                        as the name of your project artifact.
                        <img src="tutorial_server_websockets_project_artifact.png"
                             alt="Naming the project artifact in the Ktor Project Generator"
                             border-effect="line"
                             style="block"
                             width="706"/>
                    </p>
                </step>
                <step>
                    <p>
                        In the plugins section search for and add the following plugins by clicking on the
                        <control>Add</control>
                        button:
                    </p>
                    <list type="bullet">
                        <li>Routing</li>
                        <li>Content Negotiation</li>
                        <li>Kotlinx.serialization</li>
                        <li>WebSockets</li>
                        <li>Static Content</li>
                    </list>
                    <p>
                        <img src="ktor_project_generator_add_plugins.gif"
                             alt="Adding plugins in the Ktor Project Generator"
                             border-effect="line"
                             style="block"
                             width="706"/>
                    </p>
                </step>
                <step>
                    <p>
                        Once you have added the plugins, click on the
                        <control>5 plugins</control>
                        button at the top right of the plugin section, to display the added plugins.
                    </p>
                    <p>You will then see a list of all the plugins that will be added to your project:
                        <img src="tutorial_server_websockets_project_plugins.png"
                             alt="Plugins list in the Ktor Project Generator"
                             border-effect="line"
                             style="block"
                             width="706"/>
                    </p>
                </step>
                <step>
                    <include from="lib.topic" element-id="generate_project_final_step"/>
                </step>
            </procedure>
        </chapter>
        <chapter title="Add starter code" id="add-starter-code">
            <p>Once it has finished downloading, open your project in IntelliJ IDEA and follow the steps below:</p>
            <procedure>
                <step>
                    Navigate to
                    <path>src/main/kotlin</path>
                    and create a new subpackage called
                    <path>model</path>
                    .
                </step>
                <step>
                    <p>
                        Inside the
                        <path>model</path>
                        package create a new
                        <path>Task.kt</path>
                        file.
                    </p>
                </step>
                <step>
                    <p>
                        Open the
                        <path>Task.kt</path>
                        file and add an <code>enum</code> to represent priorities and a <code>data class</code> to
                        represent tasks:
                    </p>
                    <code-block src="snippets/tutorial-server-websockets/src/main/kotlin/model/Task.kt" lang="kotlin"/>
                    <p>
                        Note that the <code>Task</code> class is annotated with the <code>Serializable</code> type from
                        the
                        <code>kotlinx.serialization</code>
                        library. This means that instances can be converted to and from JSON, allowing their contents to
                        be transferred over the network.
                    </p>
                    <p>
                        Because you included the WebSockets plugin, a
                        <path>Sockets.kt</path>
                        file has been generated within
                        <path>src/main/kotlin/com/example/plugins</path>
                        .
                    </p>
                </step>
                <step>
                    <p>
                        Open the
                        <path>Sockets.kt</path>
                        file and replace the existing <code>Application.configureSockets()</code> function with the
                        implementation below:
                    </p>
                    <code-block lang="kotlin"><![CDATA[
                        fun Application.configureSockets() {
                            install(WebSockets) {
                                contentConverter = KotlinxWebsocketSerializationConverter(Json)
                                pingPeriod = Duration.ofSeconds(15)
                                timeout = Duration.ofSeconds(15)
                                maxFrameSize = Long.MAX_VALUE
                                masking = false
                            }

                            routing {
                                webSocket("/tasks") {
                                    val tasks = listOf(
                                        Task("cleaning", "Clean the house", Priority.Low),
                                        Task("gardening", "Mow the lawn", Priority.Medium),
                                        Task("shopping", "Buy the groceries", Priority.High),
                                        Task("painting", "Paint the fence", Priority.Medium)
                                    )

                                    for (task in tasks) {
                                        sendSerialized(task)
                                        delay(1000)
                                    }

                                    close(CloseReason(CloseReason.Codes.NORMAL, "All done"))
                                }
                            }
                        }
                    ]]></code-block>
                    <p>
                        In this code the following steps occur:
                    </p>
                    <list type="decimal">
                        <li>The WebSockets plugin is installed and configured with standard settings.</li>
                        <li>The <code>contentConverter</code> property is set, enabling the plugin to
                            serialize objects sent and received through the <a
                                    href="https://github.com/Kotlin/kotlinx.serialization">kotlinx.serialization</a>
                            library.
                        </li>
                        <li>Routing is configured with a single endpoint, where the relative URL is <code>/tasks</code>.
                        </li>
                        <li>Upon receiving a request, a list of tasks is serialized down the WebSocket connection.</li>
                        <li>Once all items are sent, the server closes the connection.</li>
                    </list>
                    <p>
                        For demonstration purposes, a one-second delay is introduced between sending tasks. This
                        allows us to observe the tasks appearing incrementally in our client. Without this delay,
                        the example would appear identical to the <a href="server-create-restful-apis.topic">RESTful
                        service</a> and <a href="server-create-website.topic">Web Application</a> developed in
                        previous articles.
                    </p>
                    <p>
                        The final step in this iteration is to create a client for this endpoint. Because you included
                        the
                        <a href="server-static-content.md">Static Content</a> plugin, an
                        <path>index.html</path>
                        file has been generated within
                        <path>src/main/resources/static</path>
                        .
                    </p>
                </step>
                <step>
                    <p>
                        Open the
                        <path>index.html</path>
                        file and replace the existing content with the following:
                    </p>
                    <code-block src="snippets/tutorial-server-websockets/src/main/resources/static/index.html"
                                lang="html"/>
                    <p>
                        This page uses the <a href="https://websockets.spec.whatwg.org//#websocket">WebSocket type</a>,
                        available in all modern browsers. We create this object in JavaScript, passing the URL of
                        our endpoint into the constructor. Subsequently, we attach event handlers for the
                        <code>onopen</code>, <code>onclose</code>,
                        and <code>onmessage</code> events. Upon triggering the <code>onmessage</code> event, we append a
                        row to a table using the document object's methods.
                    </p>
                </step>
                <step>
                    <include from="lib.topic" element-id="intellij_idea_start_application"/>
                </step>
                <step>
                    <p>
                        Navigate to <a href="http://0.0.0.0:8080/static/index.html">http://0.0.0.0:8080/static/index.html</a>.
                        You should see a form with a button and an empty table:
                    </p>
                    <img src="tutorial_server_websockets_iteration_1.png"
                         alt="A web browser page displaying an HTML form with one button"
                         border-effect="rounded"
                         width="706"/>
                    <p>
                        When you click on the form, tasks should be loaded from the server, appearing at a rate of one
                        per second. As a result, the table should be populated incrementally. You can also view the
                        logged messages by opening the
                        <control>JavaScript Console</control>
                        in your browser's
                        <control>developer tools</control>
                        .
                    </p>
                    <img src="tutorial_server_websockets_iteration_1_click.gif"
                         alt="A web browser page displaying list items on button click"
                         border-effect="rounded"
                         width="706"/>
                    <p>
                        With this, you can see that the service is performing as expected. A WebSocket connection is
                        opened, the items are sent to the client, and then the connection is closed. There is a lot of
                        complexity in the underlying networking, but Ktor handles all of this by default.
                    </p>
                </step>
            </procedure>
        </chapter>
    </chapter>
    <chapter title="Understanding WebSockets" id="understanding-websockets">
        <p>
            Before moving to the next iteration, it may be helpful to review some of the fundamentals of WebSockets.
            If you are already familiar with WebSockets, you can continue to <a anchor="improve-design">improve
            the design of your service</a>.
        </p>
        <p>
            In previous tutorials, your clients were sending HTTP Requests and receiving HTTP Responses. This works well
            and enables the Internet to be scalable and resilient.
        </p>
        <p>However, it's not suitable for scenarios where:</p>
        <list>
            <li>Content is generated incrementally over time.</li>
            <li>Content changes frequently in response to events.</li>
            <li>Clients need to interact with the server as content is produced.</li>
            <li>Data sent by one client needs to be quickly propagated to others.</li>
        </list>
        <p>
            Examples of these scenarios include share trading, purchasing cinema and concert tickets, bidding
            in online auctions, and chat functionality in social media. WebSockets were developed to handle these
            situations.
        </p>
        <p>
            A WebSocket connection is established over TCP and can last for an extended period. The connection provides
            ‘full duplex communication’, meaning clients can send messages to the server and receive messages from it
            simultaneously.
        </p>
        <p>
            The WebSocket API defines four events (open, message, close, and error) and two actions (send and close).
            How this functionality is accessed can vary across different languages and libraries.
            For example, in Kotlin, you can consume the sequence of incoming messages as a <a
                href="https://kotlinlang.org/docs/flow.html">Flow</a>.
        </p>
    </chapter>
    <chapter title="Improve the design" id="improve-design">
        <p>Next, you will refactor your existing code, to make room for more advanced examples.</p>
        <procedure>
            <step>
                <p>
                    In the
                    <path>model</path>
                    package, create a new
                    <path>TaskRepository.kt</path>
                    file.
                </p>
            </step>
            <step>
                <p>
                    Open
                    <path>TaskRepository.kt</path>
                    and add a <code>TaskRepository</code> type:
                </p>
                <code-block src="snippets/tutorial-server-websockets/src/main/kotlin/model/TaskRepository.kt"
                            lang="kotlin"/>
                <p>You might recall this code from the previous tutorials.</p>
            </step>
            <step>
                Navigate to the
                <path>plugins</path>
                package and open the
                <path>Sockets.kt</path>
                file.
            </step>
            <step>
                <p>
                    You can now simplify the routing in <code>Application.configureSockets()</code> by utilizing the
                    <code>TaskRepository</code>:
                </p>
                <code-block lang="kotlin"><![CDATA[
                    routing {
                        webSocket("/tasks") {
                            for (task in TaskRepository.allTasks()) {
                                sendSerialized(task)
                                delay(1000)
                            }

                            close(CloseReason(CloseReason.Codes.NORMAL, "All done"))
                        }
                    }
                ]]></code-block>
            </step>
        </procedure>
    </chapter>
    <chapter title="Send messages through WebSockets" id="send-messages">
        <p>
            To illustrate the power of WebSockets, you'll create a new endpoint where:
        </p>
        <list>
            <li>
                When a client starts up, it receives all existing tasks.
            </li>
            <li>
                Clients can create and send tasks.
            </li>
            <li>
                When one client sends a task, other clients are notified.
            </li>
        </list>
        <procedure>
            <step>
                <p>
                    In the
                    <path>Sockets.kt</path>
                    file, replace the current <code>configureSockets()</code> method with the implementation below:
                </p>
                <code-block src="snippets/tutorial-server-websockets/src/main/kotlin/com/example/plugins/Sockets.kt"
                            lang="kotlin"
                            include-lines="16-53"
                />
                <p>With this code you have done the following:</p>
                <list>
                    <li>
                        Refactored the functionality to send all existing tasks into a helper method.
                    </li>
                    <li>
                        In the <code>routing</code> section, you've created a thread-safe list of <code>session</code>
                        objects to keep track of all clients.
                    </li>
                    <li>
                        Added a new endpoint with a relative URL of <code>/task2</code>. When a client connects to
                        this endpoint, the corresponding <code>session</code> object is added to the list. The server
                        then enters an infinite loop in waiting to receive a new task. Upon receiving a new task, the
                        server stores it in the repository and sends a copy to all clients, including the current one.
                    </li>
                </list>
                <p>
                    To test this functionality, you'll create a new page that extends the functionality in
                    <path>index.html</path>
                    .
                </p>
            </step>
            <step>
                <p>
                    Within
                    <path>src/main/resources/static</path>
                    create a new HTML file called
                    <path>wsClient.html</path>
                    .
                </p>
            </step>
            <step>
                <p>
                    Open
                    <path>wsClient.html</path>
                    and add the following content:
                </p>
                <code-block src="snippets/tutorial-server-websockets/src/main/resources/static/wsClient.html"
                            lang="html"
                />
                <p>
                    This new page introduces an HTML form, into which the user can enter the information for a new task.
                    Upon submitting the form, the <code>sendTaskToServer</code> event handler is called. This builds a
                    JavaScript object with the form data and sends it to the server using the
                    <code>send</code> method of the WebSocket object.
                </p>
            </step>
            <step>
                <include from="lib.topic" element-id="intellij_idea_restart_application"/>
            </step>
            <step>
                <p>To test this functionality, open two browsers side-by-side and follow the steps below.</p>
                <list type="decimal">
                    <li>
                        In Browser A, navigate to
                        <a href="http://0.0.0.0:8080/static/wsClient.html">http://0.0.0.0:8080/static/wsClient.html</a>
                        . You should see the default tasks displayed.
                    </li>
                    <li>
                        Add a new task in Browser A. The new task should appear in the table on that page.
                    </li>
                    <li>
                        In Browser B, navigate to
                        <a href="http://0.0.0.0:8080/static/wsClient.html">http://0.0.0.0:8080/static/wsClient.html</a>
                        . You should see the default tasks, plus any new tasks that you added in Browser A.
                    </li>
                    <li>
                        Add a task in either browser. You should see the new item appearing on both pages.
                    </li>
                </list>
                <img src="tutorial_server_websockets_iteration_2_test.gif"
                     alt="Two web browser pages side-by-side demonstrating the creation of a new task through an HTML form"
                     border-effect="rounded"
                     width="706"/>
            </step>
        </procedure>
    </chapter>
    <chapter title="Add automated tests" id="add-automated-tests">
        <p>
            To streamline your QA process and make it fast, reproducible, and hands-free, you can use Ktor's built-in
            <a href="server-testing.md">support for automated testing</a>. Follow these steps:
        </p>
        <procedure>
            <step>
                <p>
                    Add the following dependency to
                    <path>build.gradle.kts</path>
                    to allow you to configure support for <a href="server-serialization.md">Content Negotiation</a>
                    within the Ktor Client
                    :
                </p>
                <code-block src="snippets/tutorial-server-websockets/build.gradle.kts"
                            lang="kotlin"
                            include-lines="30"
                />
            </step>
            <step>
                <p>
                    <include from="lib.topic" element-id="intellij_idea_load_gradle_changes"/>
                </p>
            </step>
            <step>
                <p>
                    Navigate to
                    <path>src/test/kotlin/com/example</path>
                    and open the
                    <path>ApplicationTest.kt</path>
                    file.
                </p>
            </step>
            <step>
                <p>
                    Replace the generated test class with the implementation below:
                </p>
                <code-block src="snippets/tutorial-server-websockets/src/test/kotlin/com/example/ApplicationTest.kt"
                            lang="kotlin"
                />
                <p>
                    With this setup, you:
                </p>
                <list>
                    <li>
                        Configure your service to run within the test environment and enable the same functionality that
                        you would have in production, including Routing, JSON Serialization, and WebSockets.
                    </li>
                    <li>
                        Configure Content Negotiation and WebSocket support within the <a
                            href="client-create-and-configure.md">Ktor Client</a>. Without this, the
                        client wouldn’t know how to (de)serialize objects as JSON when using WebSocket connections.
                    </li>
                    <li>
                        Declare the list of <code>Tasks</code> you expect the service to send back.
                    </li>
                    <li>
                        Use the <code>websocket</code> method of the client object to send a request to
                        <code>/tasks</code>.
                    </li>
                    <li>
                        Consume the incoming tasks as a <code>flow</code>, incrementally adding them to a list.
                    </li>
                    <li>
                        Once all tasks have been received, compare the <code>expectedTasks</code> to the <code>actualTasks</code>
                        in the usual way.
                    </li>
                </list>
            </step>
        </procedure>
    </chapter>
    <chapter title="Next steps" id="next-steps">
        <p>
            Great work! By incorporating WebSocket communication and automated tests with the Ktor Client, you've
            enhanced your Task Manager service significantly.
        </p>
        <p>
            Continue to
            <a href="server-integrate-database.topic">the next tutorial</a>
            to explore how your service can seamlessly interact with relational databases using the Exposed library.
        </p>
    </chapter>
</topic>