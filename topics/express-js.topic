<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic SYSTEM "https://helpserver.labs.jb.gg/help/schemas/mvp/html-entities.dtd">

<topic xsi:noNamespaceSchemaLocation="https://helpserver.labs.jb.gg/help/schemas/mvp/topic.v2.xsd"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       title="Migrating from Express to Ktor"
       id="express-js">

    <link-summary>This guide shows how to create, run, and test a simple Ktor application.</link-summary>

    <p>
        In this guide, we'll take a look at how to migrate an Express application to Ktor in basic scenarios:
        from generating an application and writing your first application to creating middleware for extending application functionality.
    </p>


    <chapter title="Hello world" id="hello">
        <p>
            In this section, we'll look at how to create the simplest server application that accepts <code>GET</code> requests and responds with a predefined plain text.
        </p>

        <p><control>1: Table</control></p>
        <table>
            <tr>
                <td>
                    Express
                </td>
                <td>
                    Ktor
                </td>
            </tr>
            <tr>
                <td>
                    <p>
                        The example below shows the simplest Express application that starts a server and listens on port 3000 for connections.
                    </p>
                    <code-block lang="javascript">
                        const express = require('express')
                        const app = express()
                        const port = 3000

                        app.get('/', (req, res) => {
                            res.send('Hello World!')
                        })

                        app.listen(port, () => {
                            console.log(`Responding at http://0.0.0.0:${port}/`)
                        })
                    </code-block>
                </td>
                <td>
                    <p>
                        In Ktor, you can use the embeddedServer function to configure server parameters in code and quickly run an application.
                    </p>
                    <code-block lang="kotlin">
                        import io.ktor.server.engine.*
                        import io.ktor.server.netty.*
                        import io.ktor.server.application.*
                        import io.ktor.server.response.*
                        import io.ktor.server.routing.*

                        fun main() {
                            embeddedServer(Netty, port = 8080, host = "0.0.0.0") {
                                routing {
                                    get("/") {
                                        call.respondText("Hello World!")
                                    }
                                }
                            }.start(wait = true)
                        }
                    </code-block>
                </td>
            </tr>
        </table>

        <p><control>2: Tabs</control></p>

        <tabs>
            <tab title="Express">
                <p>
                    The example below shows the simplest Express application that starts a server and listens on port 3000 for connections.
                </p>
                <code-block lang="javascript">
                    const express = require('express')
                    const app = express()
                    const port = 3000

                    app.get('/', (req, res) => {
                        res.send('Hello World!')
                    })

                    app.listen(port, () => {
                        console.log(`Responding at http://0.0.0.0:${port}/`)
                    })
                </code-block>
            </tab>
            <tab title="Ktor">
                <p>
                    In Ktor, you can use the embeddedServer function to configure server parameters in code and quickly run an application.
                </p>
                <code-block lang="kotlin">
                    import io.ktor.server.engine.*
                    import io.ktor.server.netty.*
                    import io.ktor.server.application.*
                    import io.ktor.server.response.*
                    import io.ktor.server.routing.*

                    fun main() {
                        embeddedServer(Netty, port = 8080, host = "0.0.0.0") {
                            routing {
                                get("/") {
                                    call.respondText("Hello World!")
                                }
                            }
                        }.start(wait = true)
                    }
                </code-block>
            </tab>
        </tabs>


        <p><control>3: Compare two code blocks</control></p>

        <compare style="left-right" first-title="Express" second-title="Ktor">
            <code-block lang="javascript">
                const express = require('express')
                const app = express()
                const port = 3000

                app.get('/', (req, res) => {
                    res.send('Hello World!')
                })

                app.listen(port, () => {
                    console.log(`Responding at http://0.0.0.0:${port}/`)
                })
            </code-block>
            <code-block lang="kotlin">
                import io.ktor.server.engine.*
                import io.ktor.server.netty.*
                import io.ktor.server.application.*
                import io.ktor.server.response.*
                import io.ktor.server.routing.*

                fun main() {
                    embeddedServer(Netty, port = 8080, host = "0.0.0.0") {
                        routing {
                            get("/") {
                                call.respondText("Hello World!")
                            }
                        }
                    }.start(wait = true)
                }
            </code-block>
        </compare>
    </chapter>


</topic>
